## frontend
server {
    listen       80;     ## default_serverを指定すると想定外のアクセスが来てもこのserverブロックで処理する
    server_name  localhost;
    index  index.html index.php;
    charset utf-8;

    ## レスポンスヘッダーに追記
    add_header X-Frame-Options "SAMEORIGIN";        ## クリックジャッキング対策 他ドメインからiframeでサイトを表示させるのを防ぐ
    add_header X-XSS-Protection "1; mode=block";    ## XSS対策　- 検知するとレンダリングを停止する
    add_header X-Content-Type-Options "nosniff";    ## IEで発生するコンテンツタイプSniffing対策
    
    ## ログの出力
    access_log /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;

    ## エラー時に表示するURIを指定
    error_page 404              /404.html;
    error_page 500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    ## リバースプロキシ関連の設定

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $host;

    ## フロントエンド
    location / {
        proxy_pass http://frontend:3000;
        
        # try_files $uri $uri/ /index.html?$query_string =404;
        # root /home/ubuntu/[nextjs_app]/build;     ## AWS本番用サンプル
    }

    location /_next/webpack-hmr {                               ## この設定をしないとブラウザ側のconsoleログに WebSocket connection to 'wss://xxxxxx/_next/webpack-hmr' failed などがでる。
        proxy_pass http://frontend:3000/_next/webpack-hmr;     ## ブラウザ -> Reverse-Proxy -> Next.js 間のWebSocketのコネクション確立時のやりとりを可能にする。
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

## backend
server {
    listen       8080;
    server_name  localhost;
    root /var/www/html/public;
    index  index.html index.php;
    charset utf-8;

    ## レスポンスヘッダーに追記
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    
    ## ログの出力
    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;
    access_log  /var/log/nginx/fastcgi_log combined;

    ## エラー時に表示するURIを指定
    error_page 404              /404.html;
    error_page 500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    ## URIとlocationの完全一致を定義  - 頻発するURIに対して定義すると、リクエストの処理が速くなる
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    ## リバースプロキシ関連の設定

    # proxy_set_header X-Real-IP $remote_addr;
    # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header X-Forwarded-Proto $scheme;
    # proxy_set_header Host $host;
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \\.php$ {
        # proxy_pass http://backend:9000/public/;
        # alias /home/ubuntu/[laravel_app]/public;              ## AWS本番用サンプル
        fastcgi_pass   backend:9000;                        ## Docker利用するならこっち
        # fastcgi_pass  unix:/var/run/php/php8.1-fpm.sock;  ## しないならこっち
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;
        fastcgi_pass_header "X-Accel-Redirect";
        fastcgi_pass_header "X-Accel-Expires";
    }

    ## その他バックエンドAPI
    # location /api-a/ {
    #     # proxy_pass http://backend:9000;
    # }

    location ~ /\\.(?!well-known).* {
        deny all;
    }

}

